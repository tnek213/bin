#!/bin/bash

# shellcheck disable=SC2064,SC2001,SC2016

set -euo pipefail

unset UNISON

main=$PWD

config_file=".main-push-sync"

unison_root=${XDG_CACHE_HOME:-$HOME/.cache}/main-push-sync

fatal_error() {
	echo "$(basename "$0") error: $1" >&2
	exit 1
}

# shellcheck disable=SC2016
hash() {
	local main=$1
	local other=$2
	local hash_command_directory="$unison_root/$main"
	local hash_command="$hash_command_directory/.hash_command"

	mkdir -p "$hash_command_directory"

	# Decouple the hash command from the main-push-sync script to
	# allow for changes in the hash command without affecting existing
	# Unison profiles.
	if [ ! -f "$hash_command" ]; then
		printf "#!/bin/bash\n\n%s" 'printf "%s_%s" "$(basename "$1")" "$(basename "$2")"' >"$hash_command"
		chmod +x "$hash_command"
	fi
	"$hash_command" "$main" "$other"
}

trim() {
	echo "$1" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'
}

if ! command -v unison &>/dev/null; then
	fatal_error "Unison not found"
fi

while [[ $PWD != "/" && ! -f "$config_file" ]]; do
	cd ..
done

if [[ $PWD == "/" ]]; then
	fatal_error "Could not find '$config_file' file"
fi

echo "Using configuration file '$config_file' in '$PWD'"

# shellcheck disable=SC1090
source "$config_file"

if [[ ! -v OTHERS[@] ]]; then
	fatal_error "OTHERS must be an array with at least one element"
fi

if [[ ! -v UNISON_ARGS[@] ]]; then
	UNISON_ARGS=()
fi

for other in "${OTHERS[@]}"; do
	if [ ! -d "$other" ]; then
		fatal_error "Other directory '$other' does not exist"
	fi
done

declare -A hashes
for other in "${OTHERS[@]}"; do
	if [[ -z ${hashes[$other]-} ]]; then
		hashes[$other]=$(hash "$main" "$other")
	else
		fatal_error "Duplicate hash for '$other'. The hash was '${hashes[$other]}'"
	fi
done

CONFIG=$(trim "$CONFIG")
if [[ $CONFIG =~ (\$[^O][^T][^H][^E][^R]|\$[^M][^A][^I][^N])([[:space]]|$) ]]; then
	fatal_error "Only the variables \$OTHER and \$MAIN are allowed in CONFIG"
fi

if [[ $CONFIG =~ [^[:space:]]"->" || $CONFIG =~ "->"[^[:space:]] ]]; then
	fatal_error "The -> operator in CONFIG must have exactly one space before and after it"
fi

if [[ ${ALLOW_MULTIPLE_SPACES-false} != "true" ]]; then
	while IFS= read -r line; do
		# Check if the line contains two or more consecutive spaces
		if [[ "$line" =~ [[:space:]]{2,} ]]; then
			fatal_error "CONFIG contains multiple space characters in a row. The line was: '$line'"
		fi
	done <<<"$CONFIG"
fi

if [[ -z ${UNISONBACKUPDIR-} ]]; then
	fatal_error "UNISONBACKUPDIR is not set"
fi

if [ ! -d "$UNISONBACKUPDIR" ]; then
	fatal_error "UNISONBACKUPDIR directory '$UNISONBACKUPDIR' does not exist"
fi

mkdir -p "$unison_root"

export -f hash
for other in "${OTHERS[@]}"; do
	echo "Running Unison for '$main' â†” '$other'"

	# Replace $OTHER and $MAIN in CONFIG. The extra backslashes are needed for the sed command to work.
	MAIN_OTHER_CONFIG=$(
		echo "$CONFIG" |
			sed -e 's/#/\\#/g' |
			sed -e 's#\$OTHER#'"$other#g" -e 's#\$MAIN#'"$main#g" |
			sed -e 's/\\#/#/g'
	)

	main_other_unison_prf="$unison_root/$(hash "$main" "$other").prf"
	echo "Creating '$main_other_unison_prf'"
	cat >"$main_other_unison_prf" <<FILE_END
# Automatically generated by main-push-sync.bash
root = $main
root = $other

# User configuration from .main-push-sync
$MAIN_OTHER_CONFIG

backup = Path *
backuplocation = central
backupprefix = bak_\$VERSION
maxbackups = 99
FILE_END
	echo "Running Unison for '$other'"
	cat "$main_other_unison_prf"
	echo
	UNISON=$unison_root UNISONBACKUPDIR=$UNISONBACKUPDIR unison "${UNISON_ARGS[@]}" "$@" "$(basename "$main_other_unison_prf")"
done
